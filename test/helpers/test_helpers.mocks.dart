// Mocks generated by Mockito 5.4.4 from annotations
// in klontong_management/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:convert' as _i9;
import 'dart:typed_data' as _i11;

import 'package:http/http.dart' as _i2;
import 'package:klontong_management/core/error/failure.dart' as _i5;
import 'package:klontong_management/feature/domain/entity/category.dart' as _i8;
import 'package:klontong_management/feature/domain/entity/product.dart' as _i6;
import 'package:klontong_management/feature/domain/repository/category_repository.dart'
    as _i7;
import 'package:klontong_management/feature/domain/repository/product_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i3.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<(bool, _i5.Failure?)> createProduct({
    required String? categoryId,
    required String? categoryName,
    required String? sku,
    required String? name,
    required String? description,
    required double? weight,
    required double? width,
    required double? length,
    required double? height,
    required String? image,
    required double? harga,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProduct,
          [],
          {
            #categoryId: categoryId,
            #categoryName: categoryName,
            #sku: sku,
            #name: name,
            #description: description,
            #weight: weight,
            #width: width,
            #length: length,
            #height: height,
            #image: image,
            #harga: harga,
          },
        ),
        returnValue: _i4.Future<(bool, _i5.Failure?)>.value((false, null)),
      ) as _i4.Future<(bool, _i5.Failure?)>);

  @override
  _i4.Future<(List<_i6.KlontongProduct>, _i5.Failure?)> getProducts() =>
      (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
        ),
        returnValue:
            _i4.Future<(List<_i6.KlontongProduct>, _i5.Failure?)>.value(
                (<_i6.KlontongProduct>[], null)),
      ) as _i4.Future<(List<_i6.KlontongProduct>, _i5.Failure?)>);

  @override
  _i4.Future<(_i6.KlontongProduct?, _i5.Failure?)> getProductById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductById,
          [id],
        ),
        returnValue: _i4.Future<(_i6.KlontongProduct?, _i5.Failure?)>.value(
            (null, null)),
      ) as _i4.Future<(_i6.KlontongProduct?, _i5.Failure?)>);

  @override
  _i4.Future<(bool, _i5.Failure?)> updateProduct(
    String? id, {
    required String? categoryId,
    required String? categoryName,
    required String? sku,
    required String? name,
    required String? description,
    required double? weight,
    required double? width,
    required double? length,
    required double? height,
    required String? image,
    required double? harga,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [id],
          {
            #categoryId: categoryId,
            #categoryName: categoryName,
            #sku: sku,
            #name: name,
            #description: description,
            #weight: weight,
            #width: width,
            #length: length,
            #height: height,
            #image: image,
            #harga: harga,
          },
        ),
        returnValue: _i4.Future<(bool, _i5.Failure?)>.value((false, null)),
      ) as _i4.Future<(bool, _i5.Failure?)>);

  @override
  _i4.Future<(bool, _i5.Failure?)> deleteProduct(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [id],
        ),
        returnValue: _i4.Future<(bool, _i5.Failure?)>.value((false, null)),
      ) as _i4.Future<(bool, _i5.Failure?)>);
}

/// A class which mocks [CategoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryRepository extends _i1.Mock
    implements _i7.CategoryRepository {
  MockCategoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<(bool, _i5.Failure?)> createCategory(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #createCategory,
          [name],
        ),
        returnValue: _i4.Future<(bool, _i5.Failure?)>.value((false, null)),
      ) as _i4.Future<(bool, _i5.Failure?)>);

  @override
  _i4.Future<(List<_i8.KlontongCategory>, _i5.Failure?)> getCategory() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategory,
          [],
        ),
        returnValue:
            _i4.Future<(List<_i8.KlontongCategory>, _i5.Failure?)>.value(
                (<_i8.KlontongCategory>[], null)),
      ) as _i4.Future<(List<_i8.KlontongCategory>, _i5.Failure?)>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i2.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<_i11.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i11.Uint8List>.value(_i11.Uint8List(0)),
      ) as _i4.Future<_i11.Uint8List>);

  @override
  _i4.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i4.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_1(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i4.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
